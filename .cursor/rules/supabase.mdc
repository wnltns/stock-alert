---
title: "Supabase 연동 규칙"
description: "StockAlert 프로젝트의 Supabase 데이터베이스 연동 및 인증 규칙"
---

# Supabase 연동 규칙

## Supabase 클라이언트 설정
- **클라이언트**: `@supabase/supabase-js` 사용
- **타입 생성**: `supabase gen types typescript` 명령어로 타입 자동 생성
- **환경 변수**: `.env.local`에 Supabase URL과 Anon Key 저장
- **클라이언트 초기화**: `src/lib/supabase/client.ts`에서 클라이언트 생성

## 인증 시스템
- **Supabase Auth**: 이메일/비밀번호 기반 인증
- **세션 관리**: `useUser()` 훅으로 사용자 상태 관리
- **보호된 라우트**: 미들웨어를 통한 인증 검증
- **소셜 로그인**: Google, GitHub 등 소셜 로그인 지원 (선택사항)

## 데이터베이스 보안
- **Row Level Security (RLS)**: 모든 테이블에 RLS 정책 적용
- **사용자별 데이터 격리**: 사용자는 자신의 데이터만 접근 가능
- **API 보안**: 서버 사이드에서 인증 토큰 검증
- **데이터 검증**: Zod 스키마를 통한 입력 데이터 검증

## 실시간 기능
- **배치 처리**: 정기적 주가 조회 및 조건 체크 (매일 설정된 시간)
- **Scheduled Functions**: Supabase Scheduled Functions를 통한 자동화된 작업
- **조건 체크**: 주가 변동에 따른 알림 조건 자동 검사
- **알림 발송**: 조건 충족 시 FCM을 통한 푸시 알림 발송

## API 설계 패턴
- **RESTful API**: Next.js API Routes 활용
- **타입 안전성**: Supabase 생성 타입 활용
- **에러 핸들링**: 일관된 에러 응답 형식
- **페이지네이션**: 대용량 데이터 처리를 위한 페이지네이션

## 데이터베이스 최적화
- **인덱스**: 자주 조회되는 컬럼에 인덱스 설정
- **쿼리 최적화**: 필요한 데이터만 조회하는 효율적인 쿼리
- **캐싱**: 자주 조회되는 데이터의 클라이언트 사이드 캐싱
- **배치 처리**: 대량 데이터 처리를 위한 배치 작업

## 에러 처리 전략
- **Supabase 에러**: 데이터베이스 에러를 사용자 친화적 메시지로 변환
- **네트워크 에러**: 연결 실패 시 재시도 로직
- **인증 에러**: 토큰 만료 시 자동 로그아웃
- **권한 에러**: 접근 권한 없음 시 적절한 페이지로 리다이렉트

## Supabase MCP 사용 규칙
- **MCP 도구 활용**: 모든 데이터베이스 작업에 Supabase MCP 도구 사용 필수
- **CRUD 작업**: `mcp_supabase_execute_sql`, `mcp_supabase_apply_migration` 등 MCP 도구로 직접 DB 조작
- **실시간 모니터링**: `mcp_supabase_get_logs`로 실시간 로그 확인
- **보안 검사**: `mcp_supabase_get_advisors`로 보안 및 성능 이슈 점검
- **타입 생성**: `mcp_supabase_generate_typescript_types`로 최신 타입 자동 생성
- **Edge Functions**: `mcp_supabase_deploy_edge_function`으로 서버리스 함수 배포
- **브랜치 관리**: 개발 브랜치 생성 및 관리 (`mcp_supabase_create_branch`, `mcp_supabase_merge_branch`)

## API 연동 개발 규칙
- **실시간 데이터**: 네이버 주식 API와 Supabase DB 연동 필수
- **데이터 동기화**: API 응답을 Supabase 테이블에 실시간 저장
- **CRUD 구현**: 모든 주식 구독, 알림 조건, 알림 히스토리 CRUD 작업 구현
- **트랜잭션 처리**: 데이터 일관성을 위한 트랜잭션 사용
- **에러 복구**: API 실패 시 재시도 로직 및 폴백 처리

## 개발 환경 설정
- **로컬 개발**: Supabase CLI를 통한 로컬 개발 환경
- **마이그레이션**: 데이터베이스 스키마 변경 관리 (`mcp_supabase_apply_migration`)
- **시드 데이터**: 개발용 초기 데이터 설정 (`mcp_supabase_execute_sql`)
- **테스트**: 단위 테스트 및 통합 테스트 환경