---
title: "기술 스택 규칙"
description: "StockAlert 프로젝트의 Supabase 연동 기술 스택 및 개발 제한사항"
---

# 기술 스택 규칙

## 필수 기술 스택
- **Next.js 15**: 웹앱 및 PWA 구현 (App Router)
- **React 19**: UI 컴포넌트 구성
- **TypeScript**: 타입 안전성 보장
- **Tailwind CSS**: 스타일링 프레임워크
- **shadcn/ui**: 모든 UI 컴포넌트 라이브러리
- **Lucide React**: 아이콘 라이브러리
- **Supabase**: 백엔드 서비스 (PostgreSQL, Auth, Scheduled Functions, Edge Functions)
- **Zod**: 데이터 검증 스키마

## Supabase 연동 패키지
- `@supabase/supabase-js`: Supabase 클라이언트
- `@supabase/auth-helpers-nextjs`: Next.js 인증 헬퍼
- `@supabase/auth-ui-react`: 인증 UI 컴포넌트
- `@supabase/auth-ui-shared`: 인증 UI 공유 컴포넌트

## 개발 환경 설정
- **Supabase CLI**: 로컬 개발 및 마이그레이션 관리
- **환경 변수**: `.env.local`에 Supabase 설정 저장
- **타입 생성**: `supabase gen types typescript` 명령어 활용
- **배치 처리**: Supabase Scheduled Functions를 통한 정기적 작업

## 데이터베이스 연동 규칙
- **실제 데이터베이스 사용**: Mock 데이터 대신 Supabase PostgreSQL 활용
- **Row Level Security**: 모든 테이블에 RLS 정책 적용
- **타입 안전성**: Supabase 생성 타입을 통한 완전한 타입 안전성
- **배치 처리**: Supabase Scheduled Functions를 통한 정기적 주가 조회

## 인증 시스템
- **Supabase Auth**: 이메일/비밀번호 기반 인증
- **세션 관리**: `useUser()` 훅으로 사용자 상태 관리
- **보호된 라우트**: 미들웨어를 통한 인증 검증
- **소셜 로그인**: Google, GitHub 등 소셜 로그인 지원 (선택사항)

## API 설계
- **Next.js API Routes**: RESTful API 엔드포인트
- **Supabase Edge Functions**: 서버리스 함수 (주가 체크, 알림 발송)
- **타입 안전성**: Supabase 생성 타입 활용
- **에러 핸들링**: 일관된 에러 응답 형식

## 상태 관리
- **Supabase Realtime**: 실시간 데이터 동기화
- **React Query**: 서버 상태 관리 (선택사항)
- **커스텀 훅**: Supabase 데이터 관리를 위한 커스텀 훅
- **Context API**: 전역 상태 관리 (필요시)

## 배포 환경
- **Frontend**: Vercel 배포
- **Backend**: Supabase 클라우드 서비스
- **도메인**: 커스텀 도메인 설정
- **환경 분리**: 개발/스테이징/프로덕션 환경 분리

## 성능 최적화
- **이미지 최적화**: Next.js Image 컴포넌트 활용
- **코드 분할**: 동적 import를 통한 코드 분할
- **캐싱**: Supabase 데이터 캐싱 전략
- **CDN**: Vercel CDN을 통한 정적 자원 최적화

## 보안 규칙
- **환경 변수**: 민감한 정보는 환경 변수로 관리
- **RLS 정책**: 사용자별 데이터 접근 제한
- **입력 검증**: Zod 스키마를 통한 데이터 검증
- **HTTPS**: 모든 통신은 HTTPS 사용

## 개발 도구
- **ESLint**: 코드 품질 관리
- **Prettier**: 코드 포맷팅
- **TypeScript**: 컴파일 타임 타입 검사
- **Supabase Studio**: 데이터베이스 관리 도구